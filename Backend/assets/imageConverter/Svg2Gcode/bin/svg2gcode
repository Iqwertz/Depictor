#!/usr/bin/env node

var fs = require('fs')
  , program = require('commander')
  , GCanvas = require('../gcanvas/index.js') 
  , canvg = require("canvg")
  , svg_to_png = require('svg-to-png')
  , path = require("path");



program
  .version(require('../package.json').version)
  .usage('[options]')
  .option('-o, --output <file>', 'Output file', 'out.nc')
  .option('-i, --image <file>', 'Folder for the preview image', '')
  .option('-s, --speed <number>', 'spindle speed', eval)
  .option('-f, --feed <number>', 'feed rate', eval)
  .option('-d, --depth <number>', 'z of final cut depth', eval)
  .option('-c, --depthofcut <number>', 'z offset of layered cuts', eval)
  .option('-t, --top <number>', 'z of top of work surface', eval)
  .option('-a, --above <number>', 'z of safe area above the work', eval)
  .option('-D, --tooldiameter <number>', 'diameter of tool', eval)
  .option('-p, --positive', 'Treat fill as positive, cutting only around the outside')
  

program.parse(process.argv);

let generatedGcode = '';
let outputFile = 'out.nc';
let imgOutputFile = '';

var driver = new GCanvas.GcodeDriver({
  write: function(cmd) {
    generatedGcode += cmd + ';\n';
  }
});

var gctx = new GCanvas(driver);

if(program.output) outputFile = program.output;
if(program.image) imgOutputFile = program.image;
if(program.speed) gctx.speed = program.speed;
if(program.feed) gctx.feed = program.feed;
if(program.depth) gctx.depth = program.depth;
if(program.depthofcut) gctx.depthOfCut = program.depthofcut;
if(program.top) gctx.top = program.top;
if(program.above) gctx.aboveTop = program.above;
if(program.tooldiameter) gctx.toolDiameter = program.tooldiameter;

if(program.positive) {

  gctx.fill = function(windingRule, depth) {
    gctx.save();
    gctx.strokeStyle = gctx.fillStyle;
    gctx.stroke('outer', depth);
    gctx.restore();
  }
}

gctx.toolDiameter = 0.25;

function run() {
  var svg = fs.readFileSync('input/image.svg', 'utf8');
  canvg(gctx.canvas, svg);
  generatedGcode += 'M30;\n';

  fs.writeFileSync(outputFile, generatedGcode);
  console.log('Generated Gcode File: ' + outputFile);

  if(imgOutputFile.length > 0) {
    svg_to_png.convert(path.resolve('input/image.svg'), imgOutputFile, {compress: true, defaultWidth: 200, defaultHeight: 350}).then(()=>{
      console.log('Generated Image File: ' + imgOutputFile);
        process.exit(0);
    })
  }else{
    process.exit(0);
  }

}

if(program.args.length === 0 && process.stdin.isTTY) {
  program.outputHelp();
  process.exit(0);
}
if(!process.stdin.isTTY) {
  run('/dev/stdin');
}

program.args.forEach(function(file) {
  run(file);
});

if(program.top > 0) {
  gctx.motion.rapid({z:0});
}
else {
  gctx.motion.retract();
}